import path from "path";
import fs from "fs/promises";

import { Fragment } from "react";

function ProductDetailPage(props) {
  const { loadedProduct } = props;

  //if product is not loaded yet, especially if the dynamic page is not pre-rendered
  //when we have million of products, it would be impractical to getStaticPaths()
  //for all products.
  if (!loadedProduct) {
    return <p>Loading...</p>;
  }

  return (
    <Fragment>
      <h1>{loadedProduct.title}</h1>
      <p>{loadedProduct.description}</p>
    </Fragment>
  );
}

async function getData() {
  const filePath = path.join(process.cwd(), "data", "dummy-backend.json");
  const jsonData = await fs.readFile(filePath);
  const data = JSON.parse(jsonData);

  return data;
}

export async function getStaticProps(context) {
  //getting dynamic path segments from context, but from server-side
  //similar to useRouter (inside the component) but on client-side
  const { params } = context;

  const productId = params.pid;

  const data = await getData();

  const product = data.products.find((product) => product.id === productId);

  if (!product) {
    return { notFound: true };
  }

  return {
    props: {
      loadedProduct: product,
    },
  };
}

/**
 * By default, dynamic segments are not pre-rendered, as Next does not know about possible dynamic pid
 * Therefore, we need to tell Next, which are the available dynamic segments, to pre-render them
 * In reality, we should only pre-render most visited products, and the rest should be rendered at runtime
 */
export async function getStaticPaths() {
  const data = await getData();

  //it is not mandatory to pre-generate all products (all ids)
  //if a product is not pre-generated, it will be rendered at runtime
  const ids = data.products.map((product) => product.id);

  // map id to {params: {pid: id}}, which will be pre-generated by getStaticProps()
  const pathsWithParams = ids.map((id) => ({ params: { pid: id } }));

  return {
    paths: pathsWithParams,
    //not all pages may be pre-rendered, but will be fetched at runtime
    fallback: true,
    //'blockingnextJS will wait for pages to be fully loaded before serving it
    //We do not need <Loading> icon, in this case
    //fallback: 'blocking',
  };
}

export default ProductDetailPage;
